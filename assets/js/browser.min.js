var browser = (function() {
    "use strict";

    var browserInfo = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,
        canUse: function(feature) {
            browserInfo._canUse || (browserInfo._canUse = document.createElement("div"));
            var style = browserInfo._canUse.style;
            var prop = feature.charAt(0).toUpperCase() + feature.slice(1);
            return (
                feature in style ||
                "Moz" + prop in style ||
                "Webkit" + prop in style ||
                "O" + prop in style ||
                "ms" + prop in style
            );
        },
        init: function() {
            var userAgent = navigator.userAgent;
            var browserName = "other";
            var browserVersion = 0;

            var browserPatterns = [
                ["firefox", /Firefox\/([0-9\.]+)/],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
                ["opera", /OPR\/([0-9\.]+)/],
                ["opera", /Opera\/([0-9\.]+)/],
                ["edge", /Edge\/([0-9\.]+)/],
                ["safari", /Version\/([0-9\.]+).+Safari/],
                ["chrome", /Chrome\/([0-9\.]+)/],
                ["ie", /MSIE ([0-9]+)/],
                ["ie", /Trident\/.+rv:([0-9]+)/]
            ];

            for (var i = 0; i < browserPatterns.length; i++) {
                if (userAgent.match(browserPatterns[i][1])) {
                    browserName = browserPatterns[i][0];
                    browserVersion = parseFloat(RegExp.$1);
                    break;
                }
            }

            var osName = "other";
            var osVersion = 0;

            var osPatterns = [
                ["ios", /([0-9_]+) like Mac OS X/, function(str) {
                    return str.replace("_", ".").replace("_", ".");
                }],
                ["ios", /CPU like Mac OS X/, function() {
                    return 0;
                }],
                ["wp", /Windows Phone ([0-9\.]+)/, null],
                ["android", /Android ([0-9\.]+)/, null],
                ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, function(str) {
                    return str.replace("_", ".").replace("_", ".");
                }],
                ["windows", /Windows NT ([0-9\.]+)/, null],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
                ["linux", /Linux/, null],
                ["bsd", /BSD/, null],
                ["unix", /X11/, null]
            ];

            for (var j = 0; j < osPatterns.length; j++) {
                if (userAgent.match(osPatterns[j][1])) {
                    osName = osPatterns[j][0];
                    osVersion = parseFloat(osPatterns[j][2] ? osPatterns[j][2](RegExp.$1) : RegExp.$1);
                    break;
                }
            }

            if (osName === "mac" && "ontouchstart" in window &&
                (1024 == screen.width && 1366 == screen.height ||
                    834 == screen.width && 1112 == screen.height ||
                    810 == screen.width && 1080 == screen.height ||
                    768 == screen.width && 1024 == screen.height)) {
                osName = "ios";
            }

            browserInfo.name = browserName;
            browserInfo.version = browserVersion;
            browserInfo.os = osName;
            browserInfo.osVersion = osVersion;
            browserInfo.touch = (browserName === "wp") ? 0 : navigator.msMaxTouchPoints > 0;
            browserInfo.mobile = (browserName === "wp" || browserName === "android" || browserName === "ios" || browserName === "bb");
        }
    };

    browserInfo.init();

    return browserInfo;
})();

// Export the browser object for use
